---
title: "Ghoulio Password Challenge"
self-contained: true
editor: 
  markdown: 
    wrap: 72
format: 
  html:
    css: styles.css
    code-fold: true
    toc: true
    toc-depth: 2
---

Did you know?

Hackers are able to write scripts that can try up to 1 billion passwords per second?

This is why password strength is so important! Strong passwords containing upper and lower case letters, numbers, and special characters will be nearly impossible fro hackers to guess.

$$
Possibilities = PossibleCharacters^{Password Length}
$$

```{r,include=FALSE}
# Load necessary libraries
library(crosstalk)
library(plotly)
library(DT)
library(dplyr)
library(fresh)
library(lubridate)
library(tidyr)
library(htmltools)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
```

```{r,include=FALSE}
# --- Define constants globally for the calculation block ---
SECONDS_PER_YEAR <- 60 * 60 * 24 * 365.25
ATTEMPTS_PER_SECOND <- 1e9 

# --- CORE LOGIC FUNCTION (omitted for brevity) ---
calculate_crack_time_raw <- function(length, use_lower, use_upper, use_numbers, use_special) {
  alphabet_size <- 0
  if (use_lower) { alphabet_size <- alphabet_size + 26 }
  if (use_upper) { alphabet_size <- alphabet_size + 26 }
  if (use_numbers) { alphabet_size <- alphabet_size + 10 }
  if (use_special) { alphabet_size <- alphabet_size + 33 }
  if (alphabet_size == 0) { return(NA) }

  log10_combinations <- length * log10(alphabet_size)
  log10_rate <- log10(ATTEMPTS_PER_SECOND) + log10(SECONDS_PER_YEAR)
  log10_crack_years <- log10_combinations - log10_rate
  
  return(10^log10_crack_years)
}

```

```{r,include=FALSE}

# --- 1. GENERATE ALL SCENARIOS ---
lengths <- 4:32
sets <- expand_grid(
  L = c(TRUE), U = c(TRUE, FALSE), N = c(TRUE, FALSE), S = c(TRUE, FALSE)
) %>%
  mutate(
    Char_Set = paste0(if_else(L, "L", ""), if_else(U, "U", ""), if_else(N, "N", ""), if_else(S, "S", "")),
    Char_Desc = case_when(
      Char_Set == "L" ~ "Lowercase Only (26)",
      Char_Set == "LUNS" ~ "All Four (95)",
      .default = paste0("Custom (", 26*L + 26*U + 10*N + 33*S, " chars)")
    )
  )

# --- 2. COMBINE AND CALCULATE & SORT ---
full_data <- sets %>%
  tidyr::expand_grid(Length = lengths) %>%
  rowwise() %>%
  mutate(Crack_Years = calculate_crack_time_raw(Length, L, U, N, S)) %>%
  ungroup() %>%
  mutate(
    Alphabet_Size = 26*L + 26*U + 10*N + 33*S,
    Combinations = round(10^(Length * log10(Alphabet_Size)), 0),
    Formatted_Time = if_else(
      Crack_Years < 1,
      as.character(seconds_to_period(Crack_Years * SECONDS_PER_YEAR)),
      paste0(format(Crack_Years, scientific = TRUE, digits = 3), " years")
    )
  ) %>%
  filter(Alphabet_Size > 0) %>%
  # --- NEW: RELOCATE TARGET COLUMN TO INDEX 0 ---
  relocate(Formatted_Time) %>% 
  # Sort for robust initial state (Length 4, minimum characters)
  arrange(Length, U, N, S)

# --- 3. CREATE SHARED DATA OBJECT ---
shared_data <- SharedData$new(full_data)

```
Use the controls below to select the password characteristics. The chart and data table will update instantly without a server.

<div class="controls-panel">
```{r,echo=FALSE}
# --- INPUT 1: Password Length ---
filter_select(
  id = "length_select", 
  label = "1. Select Password Length:", 
  sharedData = shared_data, 
  group = ~Length, 
  multiple = FALSE
)

# --- INPUT 2: Uppercase Toggle ---
filter_select(
  id = "case_toggle", 
  label = "2. Include Uppercase (A-Z)?:", 
  sharedData = shared_data, 
  group = ~U, 
  multiple = FALSE
)

# --- INPUT 3: Numbers Toggle ---
filter_select(
  id = "numbers_toggle", 
  label = "3. Include Numbers (0-9):", 
  sharedData = shared_data, 
  group = ~N, 
  multiple = FALSE
)

# --- INPUT 4: Special Characters Toggle ---
filter_select(
  id = "special_toggle", 
  label = "4. Include Special Characters (!@#$%...):", 
  sharedData = shared_data, 
  group = ~S, 
  multiple = FALSE
)
```

```{r}
htmltools::tagList(
  htmltools::tags$h3("Estimated Time to Crack (at 1 Billion Attempts/sec):"),
  
  datatable(
    shared_data, 
    options = list(
      dom = 't',              # Only show the table body
      pageLength = 1,         # Show only the single filtered row
      ordering = FALSE,       # Disable sorting
      searching = FALSE,      # Disable search
      columnDefs = list(
        # Hide ALL columns except the one we want
        list(visible = FALSE, targets = '_all'), 
        # EXCEPT for the Formatted_Time column, which is now index 0!
        list(visible = TRUE, targets = 0) 
      ),
      # Inject custom CSS for styling
      initComplete = htmlwidgets::JS(
        "function(settings, json) {",
        "  $(this.api().table().container()).css({",
        "    'font-size': '2.5em', ", 
        "    'font-weight': 'bold', ", 
        "    'color': '#FF8C00',",
        "    'text-align': 'center'",
        "  });",
        "  // Hide the table header completely",
        "  $(this.api().table().header()).css('display', 'none');",
        "}"
      )
    ),
    colnames = ""
  )
)
```

