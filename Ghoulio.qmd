---
title: "Ghoulio"
format: html
editor: visual
---

## 

Did you know?

Hackers are able to write scripts that can try up to 1 billion passwords per second?

This is why password strength is so important! Strong passwords containing upper and lower case letters, numbers, and special characters will be nearly impossible fro hackers to guess.

$$
Possibilities = PossibleCharacters^{Password Length}
$$

```{r}
(94^10/1000000000)/3600/24/365
```

```{r}
library(shiny)
library(shinydashboard)
library(fresh)       
library(dplyr)
library(lubridate)

# --- 1. DEFINE THEME WITH `fresh` ---
# A deep, dark background color
DARK_BG <- "#212121" 
# A vibrant orange accent color (e.g., traffic cone orange)
ORANGE_ACCENT <- "#FF8C00" 

my_theme <- create_theme(
  # Set the overall AdminLTE skin to 'dark' to get the dark sidebar/header look
  adminlte_color(
    # The 'light-blue' status is the default primary color in shinydashboard, 
    # so we overwrite it with our orange accent.
    light_blue = ORANGE_ACCENT, 
    # The 'blue' status is used for the header/sidebar skin
    blue = DARK_BG 
  ),
  # Customize the main sidebar for a consistent dark look
  adminlte_sidebar(
    dark_bg = DARK_BG,
    dark_hover_bg = ORANGE_ACCENT,
    dark_color = "#FFFFFF" # White text color
  ),
  # Customize the main body background
  adminlte_global(
    content_bg = "#343434",  # Slightly lighter dark grey for the body
    box_bg = "#454545"          # Default foreground (text) color
  )
)
```

```{r}
# --- CORE LOGIC FUNCTION 
calculate_crack_time <- function(length, use_lower, use_upper, use_numbers, use_special) {
  # 1. Determine the size of the character set (Alphabet Size)
  alphabet_size <- 0
  
  if (use_lower) {
    alphabet_size <- alphabet_size + 26
  }
  if (use_upper) {
    alphabet_size <- alphabet_size + 26
  }
  if (use_numbers) {
    alphabet_size <- alphabet_size + 10
  }
  # A reasonable set of common special characters
  if (use_special) {
    alphabet_size <- alphabet_size + 33
  }

  if (alphabet_size == 0) {
    return(list(combinations = 0, crack_years = 0, crack_formatted = "N/A - No characters selected"))
  }

  # 2. Calculate Total Possible Combinations (using log for large numbers)
  log10_combinations <- length * log10(alphabet_size)
  
  ATTEMPTS_PER_SECOND <- 1e9 
  SECONDS_PER_YEAR <- 60 * 60 * 24 * 365.25

  # 3. Calculate Time to Crack (in years)
  log10_rate <- log10(ATTEMPTS_PER_SECOND) + log10(SECONDS_PER_YEAR)
  log10_crack_years <- log10_combinations - log10_rate
  
  crack_years <- 10^log10_crack_years

  # 4. Format the Output
  combinations_formatted <- format(10^log10_combinations, scientific = TRUE, digits = 3)
  
  if (crack_years < 1e-6) {
    crack_formatted <- paste(round(crack_years * SECONDS_PER_YEAR * 1000, 2), "milliseconds")
  } else if (crack_years < 1) {
    crack_seconds <- crack_years * SECONDS_PER_YEAR
    crack_duration <- seconds_to_period(crack_seconds)
    crack_formatted <- format(crack_duration, units = c("years", "days", "hours", "minutes", "seconds"))
  } else {
    crack_formatted <- paste(format(crack_years, scientific = TRUE, digits = 3), "years")
  }

  return(list(combinations = combinations_formatted, crack_years = crack_years, crack_formatted = crack_formatted))
}

```

```{r}
# --- SHINY UI ---
ui <- dashboardPage(
  # Set the skin to 'blue' to trigger the dark sidebar/header defined by 'blue' in adminlte_color
  dashboardHeader(title = "Password Strength Calculator 🔐"), 
  dashboardSidebar(
    menuItem("Calculator", tabName = "calculator", icon = icon("key"))
  ),
  dashboardBody(
    # --- IMPORTANT: APPLY THE THEME HERE ---
    use_theme(my_theme), 
    
    tabItems(
      tabItem(tabName = "calculator",
              h2("Brute-Force Crack Time Estimator"),
              fluidRow(
                # INPUT Panel
                box(
                  title = "Password Parameters", 
                  # Set status to the custom-colored 'primary' which is now Orange
                  status = "primary", solidHeader = TRUE,
                  sliderInput("length", "Password Length:", min = 4, max = 32, value = 12, step = 1),
                  checkboxGroupInput("char_set", "Include Characters:",
                                     choices = list("Lowercase Letters (a-z)" = "lower",
                                                    "Uppercase Letters (A-Z)" = "upper",
                                                    "Numbers (0-9)" = "numbers",
                                                    "Special Characters (~!@#$)" = "special"),
                                     selected = c("lower", "upper", "numbers", "special")
                  )
                ),
                
                # OUTPUT Panel
                box(
                  title = "Results (1 Billion Attempts/sec)", 
                  status = "warning", solidHeader = TRUE, # Use a neutral status color for the box title
                  
                  # The valueBox status="primary" will now be Orange
                  valueBoxOutput("combinationsBox"),
                  
                  # The valueBox status="success" will now be a different color (still dark themed)
                  valueBoxOutput("crackTimeBox"),
                  
                  h4("Detailed Crack Time:"),
                  verbatimTextOutput("detailedCrackTime")
                )
              )
      )
    )
  )
)
```

```{r}
# --- SHINY SERVER ---
server <- function(input, output) {
  
  crack_result <- reactive({
    len <- input$length
    use_lower <- "lower" %in% input$char_set
    use_upper <- "upper" %in% input$char_set
    use_numbers <- "numbers" %in% input$char_set
    use_special <- "special" %in% input$char_set
    
    calculate_crack_time(len, use_lower, use_upper, use_numbers, use_special)
  })
  
  # Output: Total Combinations
  output$combinationsBox <- renderValueBox({
    result <- crack_result()
    valueBox(
      result$combinations, 
      "Total Possible Passwords", 
      icon = icon("puzzle-piece"),
      # This 'primary' color is mapped to our ORANGE_ACCENT in fresh
      color = "light-blue" 
    )
  })
  
  # Output: Formatted Crack Time
  output$crackTimeBox <- renderValueBox({
    result <- crack_result()
    valueBox(
      result$crack_formatted, 
      "Time to Crack", 
      icon = icon("hourglass-half"),
      # This 'success' color is a default dark theme color, but still looks good
      color = "green"
    )
  })
  
  # Output: Detailed Result Text
  output$detailedCrackTime <- renderPrint({
    result <- crack_result()
    cat(paste("Total Combinations:", result$combinations, "\n"))
    cat(paste("Time to Crack:", result$crack_formatted, "\n"))
  })
}
```

```{r}
# --- Run the application ---
shinyApp(ui = ui, server = server)
```
